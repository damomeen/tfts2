#!/usr/bin/env python

import sys, os, logging, time
from logging.handlers import RotatingFileHandler
from optparse import OptionParser
from threading import Lock
from daemon import Daemon
from tfts2_agent import tfts2_agent
  
##############################################

MODULE_NAME = "tfts2"
__version__ = '0.1'

##############################################

class ModuleDaemon(Daemon):
    def __init__(self, moduleName, options):
        self.moduleName=moduleName
        self.options = options
        self.logger = logging.getLogger(self.__class__.__name__)
        pidFile = "%s/%s.pid" % (self.options.pidDir, self.moduleName)
        Daemon.__init__(self, pidFile)

    #---------------------
    def run(self):
        """
        Method called when starting the daemon. 
        """
        try:
            a = tfts2_agent(self.options.xmlDir, int(self.options.freq))
            a.start()
        except:
            import traceback
            self.logger.error("Exception" + traceback.format_exc())

##############################################

if __name__ == "__main__":
    
    # get this file location:
    location = os.path.dirname(os.path.abspath(__file__))[:-4] # remove '/src' from the path 

    # optional command-line arguments processing
    usage='usage: %prog [options] start|stop|restart'
    parser = OptionParser(usage=usage, version="%prog " + __version__)
    parser.add_option("-p", "--pidDir", dest="pidDir", default='/tmp', help="directory for pid file (default: ./tmp/)")
    parser.add_option("-l", "--logDir", dest="logDir", default='%s/log' % location, help="directory for log file (default: ./tfts2/log/)")
    parser.add_option("-x", "--xmlDir", dest="xmlDir", default='%s/xmls/' % location,    help="directory containing xml files (default: ./tfts2/xmls/)")
    parser.add_option("-f", "--freq", dest="freq", default='10',    help="How frequently (in seconds) xmls should be checked (default: 10 seconds)")
    options, args = parser.parse_args()

    if len(args) > 0 and 'start' in args[0]:
        # clear log file
        try:
            os.remove("%s/%s.log" % (options.logDir, MODULE_NAME))
        except: 
            pass          

    # creation of logging infrastructure
    handler = RotatingFileHandler("%s/%s.log" % (options.logDir, MODULE_NAME), maxBytes=200000000, backupCount=5)
    handler.setFormatter(logging.Formatter("%(levelname)s - %(asctime)s - %(name)s - %(message)s"))
    handler.setLevel(logging.DEBUG)

    logger = logging.getLogger()
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # starting module's daemon
    daemon = ModuleDaemon(MODULE_NAME, options)
    
    # mandatory command-line arguments processing
    if len(args) == 0:
        parser.print_help()
        sys.exit(2)
    if 'start' == args[0]:
        print "\n%s is located in %s" % (MODULE_NAME, location)   
        print " -> searching for xmls files in %s" % options.xmlDir
        print " -> log file is located in %s" % options.logDir
        print "...running as daemon... (to be stopped use: '%s stop')\n" % MODULE_NAME
        
        logger.info('starting the module')
        daemon.start()
    elif 'stop' == args[0]:
        logger.info('stopping the module')
        daemon.stop()
    elif 'restart' == args[0]:
        logger.info('restarting the module')
        daemon.restart()
    else:
        print "Unknown command: %s" % args[0]
        parser.print_help()
        sys.exit(2)
sys.exit(0)